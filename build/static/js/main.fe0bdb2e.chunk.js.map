{"version":3,"sources":["App.js","logo.svg","serviceWorker.js","index.js"],"names":["App","placevalue","e","id","document","getElementById","value","textContent","equal","exp","eval","clear","state","name","className","onClick","React","Component","module","exports","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fe0bdb2e.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nclass App extends React.Component{\n  constructor(){\n    super();\n    this.state={\n      name:\"dhananjay\"\n    }\n}\nplacevalue=(e,id)=>{\n  document.getElementById('calculation').value += document.getElementById(id).textContent;\n}\n\nequal=(e)=>{\nconst exp = document.getElementById('calculation').value;\ndocument.getElementById('calculation').value=eval(exp);\n}\n\nclear=(e)=>{\ndocument.getElementById('calculation').value='';\n}\nrender(){\n  return (\n    <div className=\"App\">\n      <div className=\"Calculator\">\n        <input className='calculation' id='calculation'></input>\n        <div className='airthmatic-buttons'>\n          <button className='plus' id='add' onClick={e=>{this.placevalue(e,'add')}}>+</button>\n          <button className='plus' id='sub' onClick={e=>{this.placevalue(e,'sub')}}>-</button>\n          <button className='plus' id='multiplication' onClick={e=>{this.placevalue(e,'multiplication')}}>*</button>\n          <button className='plus' id='division' onClick={e=>{this.placevalue(e,'division')}}>/</button>\n          </div>\n          <div className='airthmatic-buttons1'>\n          <button className='plus' id='mod' onClick={e=>{this.placevalue(e,'mod')}}>%</button>\n          <button className='plus' id='1' onClick={e=>{this.placevalue(e,'1')}}>1</button>\n          <button className='plus' id='2' onClick={e=>{this.placevalue(e,'2')}}>2</button>\n          <button className='plus' id='3' onClick={e=>{this.placevalue(e,'3')}}>3</button>\n          </div>\n          <div className='airthmatic-buttons2'>\n          <button className='plus' id='4' onClick={e=>{this.placevalue(e,'4')}}>4</button>\n          <button className='plus' id='5' onClick={e=>{this.placevalue(e,'5')}}>5</button>\n          <button className='plus' id='6' onClick={e=>{this.placevalue(e,'6')}}>6</button>\n          <button className='plus' id='7' onClick={e=>{this.placevalue(e,'7')}}>7</button>\n          </div>\n          <div className='airthmatic-buttons3'>\n          <button className='plus' id='8' onClick={e=>{this.placevalue(e,'8')}}>8</button>\n          <button className='plus' id='9' onClick={e=>{this.placevalue(e,'9')}}>9</button>\n          <button className='plus' id='0' onClick={e=>{this.placevalue(e,'0')}}>0</button>\n          <button className='plus' id='equal' onClick={e=>{this.equal(e,'equal')}}>=</button>\n          </div>\n        <button className='clear' id='clear' onClick={e=>{this.clear(e,'clear')}}> clear </button> \n      </div>\n     \n    </div>\n  );\n};\n  }\nexport default App;","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}